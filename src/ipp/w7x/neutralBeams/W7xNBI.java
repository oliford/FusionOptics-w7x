package ipp.w7x.neutralBeams;


import oneLiners.OneLiners;
import ipp.neutralBeams.SimpleBeamGeometry;
import ipp.neutralBeams.SimpleBeamGeometryAUGType;
import algorithmrepository.Algorithms;
import fusionOptics.Util;
import fusionOptics.interfaces.NullInterface;
import fusionOptics.surfaces.Cylinder;
import fusionOptics.types.Optic;

/** Simple static beam line info for use in the ray tracer 
 * Generated by minerva-neutralBeams/src/seed.minerva.neutralBeams.w7x.DumpBeamLines
 * */
public class W7xNBI extends SimpleBeamGeometryAUGType {
	
		
	/** Beam inclination angle */
	private static final double beta[][] = OneLiners.deg2Rad(new double[][]{ 
				{ 4.9, 4.9, -4.9, -4.9 }, 
				{ -4.9, -4.9, 4.9, 4.9 }, 
			});
	
	private static final double ang = (90 - 18 - 15.15) * Math.PI / 180;	
	/** Angle of R to x (x axis is border between modules 10 and 11) */	
	private static final double theta[][] = OneLiners.deg2Rad(new double[][]{ 
				{ 72-15.15, 72-15.15, 72-15.15, 72-15.15 },	//AEK20
				{ 72+15.15, 72+15.15, 72+15.15, 72+15.15 },	//AEK21
			}); 
	
	/** Angle FROM the reverse box axis (opposite to injection direction)
	 * 	TO R (radial from (0,0) to P0). +ve for anticlockwise */
	private static final double psi[][] = OneLiners.deg2Rad(new double[][]{ 
				{ -7.5, -7.5, -7.5, -7.5 },
				{ +7.5, +7.5, +7.5, +7.5 },
			});
	
	 /** Horizontal angle of beam axis to box axis */
	private static final double alpha[][] = OneLiners.deg2Rad(new double [][]{ 
				{ -4.1, 4.1, 4.1, -4.1 },	
				{ 4.1, -4.1, -4.1, 4.1 },	
			});
	
	 /** Radial position of horzontal beam crossing */
	private static final double R_P0[][] = new double[][]{ 
				{ 6.700, 6.700, 6.700, 6.700 },	
				{ 6.700, 6.700, 6.700, 6.700 },	
			};
	
	/** Height (Z coord) of vertical beam crossing */
	private static final double Z0[][] = new double[][]{
				{ -0.305, -0.305, -0.305, -0.305 },		
				{ 0.305, 0.305, 0.305, 0.305 },		
			};
	
	/** Distance of Z=-0.305 crossing along box axis from P0 
	 * +ve is toward the beam source / away from R=0 */ 
	private static final double Dx[][] = new double[][]{ 
				{ -0.5, -0.5, -0.5, -0.5 },
				{ -0.5, -0.5, -0.5, -0.5 },
			}; 
	
	private static W7xNBI defaultInstance;
	
	private W7xNBI() { 
		//Px and u filled in geom providers
		beamWidth = 0.20; //Made up
		sourceR = 8.00; //Made up
		plasmaR0 = 5.0;
		plasmaR1 = 6.5;
	}	
	
	/** NBI default Geometry, auto generated by 
	 * 		minerva-aug/seed.minerva.neutralBeams.aug.AugHeatingBeams.main()
	 */
	public static W7xNBI def(){
		if(defaultInstance != null)
			return defaultInstance;
		
		defaultInstance = new W7xNBI();
		
		defaultInstance.calcVectors(R_P0, theta, psi, alpha, beta, Dx, Z0);
		
		return defaultInstance;
	}
	
	
	/* --------------------------
	w7xBeamDefs  */
	public static W7xNBI oldFixed(){
		W7xNBI beamGeom = new W7xNBI();

		beamGeom.Px = new double[][]{
		};
		beamGeom.u = new double[][]{
		};
	
		
		return beamGeom;
	}		

}
