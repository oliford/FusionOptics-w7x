package ipp.w7x.neutralBeams;


import oneLiners.OneLiners;
import ipp.neutralBeams.SimpleBeamGeometry;
import algorithmrepository.Algorithms;
import fusionOptics.Util;
import fusionOptics.interfaces.NullInterface;
import fusionOptics.surfaces.Cylinder;
import fusionOptics.types.Optic;

/** Simple static beam line info for use in the ray tracer 
 * Generated by minerva-neutralBeams/src/seed.minerva.neutralBeams.w7x.DumpBeamLines
 * */
public class W7xNBI extends SimpleBeamGeometry {
	
	/* upper/lower = real hall Z
	 * near/away = near/away from the other beam box, or AEA21
	 * 
	 * Q1 is upper, away 
	 * Q2 is upper, nearer
	 * Q3 is lower, nearer
	 * Q4 is lower, away
	 *   
	 * Q5 is lower, nearer
	 * Q6 is lower, away
	 * Q7 is upper, away
	 * Q8 is upper, nearer
	 */
	

	private static W7xNBI instance = new W7xNBI();
	
	/** The default as-advertised geometry */
	public static W7xNBI def(){ return instance;	}
	
	private double Px[][];
	private double u[][];
	
	/* --------------------------
	w7xBeamDefs  */
	public W7xNBI() {
		Px = new double[][]{
				{3.480123, 5.144472, -0.305}, 
				{3.415672, 5.175421, -0.305}, 
				{3.415672, 5.175421, -0.305}, 
				{3.480123, 5.144472, -0.305}, 
				{0.2787, 6.194685, 0.305}, 
				{0.208366, 6.20753, 0.305}, 
				{0.208366, 6.20753, 0.305}, 
				{0.2787, 6.194685, 0.305}, 
			};
		u = new double[][]{
				{-0.365971, -0.926698, 0.085417}, 
				{-0.494403, -0.865026, 0.085417}, 
				{-0.494403, -0.865026, -0.085417}, 
				{-0.365971, -0.926698, -0.085417}, 
				{-0.108469, -0.990423, -0.085417}, 
				{-0.248623, -0.964827, -0.085417}, 
				{-0.248623, -0.964827, 0.085417}, 
				{-0.108469, -0.990423, 0.085417}, 
			};
		
		beamWidth = 0.20;
		sourceR = 8.00; //Made up
		plasmaR0 = 5.0;
		plasmaR1 = 6.5;
	}		

	@Override
	public double[][] startAll() { return Px; }
	@Override
	public double[][] uVecAll() { return u; }

	private int boxToBeams[][] = new int[][]{ { 0,1,2,3 }, { 4,5,6,7 }};
	
	@Override
	public double[] startBox(int boxIdx) { return avgVec(Px, boxToBeams[boxIdx]);	}

	@Override
	public double[] uVecBox(int boxIdx)  { return OneLiners.reNorm(avgVec(u, boxToBeams[boxIdx]));	}
}
