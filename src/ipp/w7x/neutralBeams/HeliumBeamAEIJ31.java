package ipp.w7x.neutralBeams;


import algorithmrepository.Algorithms;
import fusionDefs.neutralBeams.SimpleBeamGeometry;
import fusionOptics.Util;
import fusionOptics.interfaces.NullInterface;
import fusionOptics.surfaces.Cylinder;
import fusionOptics.types.Optic;

/** Simple static beam line info for use in the ray tracer 
 * Generated by minerva-neutralBeams/src/seed.minerva.neutralBeams.DumpBeamLines
 * */
public class HeliumBeamAEIJ31 extends SimpleBeamGeometry {
	
	private static HeliumBeamAEIJ31 instance = new HeliumBeamAEIJ31();
	
	/** The default as-advertised geometry */
	public static HeliumBeamAEIJ31 def(){ return instance;	}
	
	private double Px[][];
	private double u[][];
	
	public HeliumBeamAEIJ31() {

		Px = new double[][]{
				{-4.531, 2.095, 0.850 }, 
			};
			
		double[] p2 = { -5.245, 2.177, 0.922  };
		
		u = new double[][]{
				Util.reNorm(Util.minus(Px[0], p2)) 
			};
		
		beamWidth = 0.02; //Made up
		sourceR = 8.00; //Made up
		plasmaR0 = 5.0; //Made up
		plasmaR1 = 6.5; //Made up
	}

	@Override
	public double[][] startAll() { return Px; }
	@Override
	public double[][] uVecAll() { return u; }

	@Override
	public double[] startBox(int boxIdx) { return Px[0]; }

	@Override
	public double[] uVecBox(int boxIdx) { return u[0]; }

	@Override
	public double[] getVoltageAll() { return new double[]{ Double.NaN }; } // No idea what this will be
}
