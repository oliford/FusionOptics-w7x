package ipp.w7x.fusionOptics.w7x.aet20;

import algorithmrepository.Algorithms;
import fusionOptics.Util;
import fusionOptics.interfaces.NullInterface;
import fusionOptics.surfaces.Cylinder;
import fusionOptics.types.Optic;

/** Simple static beam line info for use in the ray tracer 
 * Generated by minerva-neutralBeams/src/seed.minerva.neutralBeams.w7x.DumpBeamLines
 * */
public abstract class W7XBeamDefsSimple {
	
	/* upper/lower = real hall Z
	 * near/away = near/away from the other beam box, or AEA21
	 * 
	 * Q0 is upper, away 
	 * Q1 is upper, nearer
	 * Q2 is lower, nearer
	 * Q3 is lower, away
	 *   
	 * Q5 is lower, nearer
	 * Q6 is lower, away
	 * Q7 is upper, away
	 * Q8 is upper, nearer
	 */
	
	public static final double nbiStart[][] = {
		{3.480123, 5.144472, -0.305}, 
		{3.415672, 5.175421, -0.305}, 
		{3.415672, 5.175421, -0.305}, 
		{3.480123, 5.144472, -0.305},
		{0.2787, 6.194685, 0.305}, 
		{0.208366, 6.20753, 0.305}, 
		{0.208366, 6.20753, 0.305}, 
		{0.2787, 6.194685, 0.305}, 
	};
	
	public static final double nbiUnit[][] = {
		{-0.365971, -0.926698, 0.085417}, 
		{-0.494403, -0.865026, 0.085417}, 
		{-0.494403, -0.865026, -0.085417}, 
		{-0.365971, -0.926698, -0.085417}, 
		{-0.108469, -0.990423, -0.085417}, 
		{-0.248623, -0.964827, -0.085417}, 
		{-0.248623, -0.964827, 0.085417}, 
		{-0.108469, -0.990423, 0.085417}, 
	};
	
	public static double[] getPosOfBeamAxisAtR(int beamIdx, double R){
		double t[] = Algorithms.cylinderLineIntersection(nbiStart[beamIdx], nbiUnit[beamIdx], new double[]{0,0,0}, new double[]{0,0,1}, R*R);
		return Util.plus(nbiStart[beamIdx], Util.mul(nbiUnit[beamIdx], Math.min(t[0],t[1])));
	}

	
	public static Optic makeBeamClyds() {
		Optic cylds = new Optic("W7XBeamDefsSimple");
		double beamLength = 2.000;
		double beamRadius = 0.100;
		for(int i=0; i < nbiStart.length; i++){
			double centre[] = Util.plus(nbiStart[i], Util.mul(nbiUnit[i], beamLength/2));
			Cylinder clyd = new Cylinder("beam_"+i, 
					centre, nbiUnit[i], beamRadius, beamLength, NullInterface.ideal());
			cylds.addElement(clyd);
		}
		return cylds;
	}
}
